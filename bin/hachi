#!/usr/bin/env node

/*
 The MIT License

 Copyright (c) 2013 Hadrien Jouet https://github.com/grownseed

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */

var hachi_exec = require('commander'),
  nconf = require('nconf'),
  Table = require('cli-table'),
  Hachi = require('../lib');

hachi_exec.version('0.0.1')
  .usage('[options] <command> [param1, [param2, [...]]]')
  .option('-s, --secure', 'Use if host runs over HTTPS')
  .option('-r, --raw', 'Output raw data');

hachi_exec.on('--help', function() {
  console.log('  Commands:');
  console.log('');
  console.log('    connect     [target [port]]               (use --secure with HTTPS server)');
  console.log('    login       [user [password]]');
  console.log('    logout');
  console.log('    adduser     [user [password [admin]]]     (`y` to make user admin)');
  console.log('    updateuser  [user [password [admin]]]     (`y` to make user admin)');
  console.log('');
  console.log('    deploy      [user [app]]    (package.json `user` and `name` used over args)');
  console.log('    start       [user [app]]    (package.json `user` and `name` used over args)');
  console.log('    stop        [user [app]]    (package.json `user` and `name` used over args)');
  console.log('    restart     [user [app]]    (package.json `user` and `name` used over args)');
  console.log('    listdrones  [user [app]]');
  console.log('');
  console.log('    listproxies [public_port [user [app]]]');
  console.log('    startproxy  [public_port]');
  console.log('    stopproxy   [public_port]');
  console.log('    addroute    [public_port [port [host [domain]]]]');
  console.log('    deleteroute [public_port [port]]');
});

hachi_exec.parse(process.argv);

//prompt for supplied fields and merges values to params
function prompt(fields, params, fn) {
  if (!fields || fields.length === 0)
    return fn(params);

  var f = fields.shift(),
    label = ' > ' + f + ': ';

  function proceed(value) {
    params[f] = value;

    prompt(fields, params, fn);
  }

  if (f === 'password')
    hachi_exec.password(label, '*', proceed);
  else
    hachi_exec.prompt(label, proceed);
}

//load saved ishiki hosts
nconf.file(__dirname + '/../ishiki_hosts.json');

//extract command
var call = hachi_exec.args.shift();

//perform call to api and process output
function callAndProcess(hachi, api_module, call, params) {
  hachi.callApi(api_module, call, params, function(err, result) {
    if (err) {
      if (!hachi_exec.raw && err.message)
        console.error(err.message);

      if (err.required && err.required.length > 0) {
        prompt(err.required, params, function(params) {
          callAndProcess(hachi, api_module, call, params);
        });
      } else {
        if (!err.message)
          console.log(err);
        process.exit(1);
      }
    } else {
      //save authentication token if one
      if (result && result.raw && result.raw.token) {
        nconf.set('hosts:' + hachi.host.target + '_' + hachi.host.port + ':token', result.raw.token);
        nconf.save();
      }
      if (!hachi_exec.raw && result && result.message && result.message.push) {
        var table = new Table({
          head: result.message.shift()
        });

        for (var i = 0, n = result.message.length; i < n; i++)
          table.push(result.message[i]);

        result.message = table.toString();
      }

      console.log(!hachi_exec.raw && result.message || result);
      process.exit();
    }
   });
}

//connect to host
function connect(host) {
  if (!host || host && !(host.target && host.port)) {
    console.log('No target host specified');
  } else {
    //save host
    var host_label = host.target + '_' + host.port;
    nconf.set('hosts:' + host_label, host);
    nconf.set('paths:' + process.cwd(), host_label);
    nconf.save();

    var hachi = new Hachi(host);

    if (call === 'connect') {
      console.log('Host set to ' + host.target + ':' + host.port);
      process.exit();
      return;
    }

    //find api call
    if (call && call.indexOf('_') !== 0) {
      var api_modules = Object.keys(hachi.api),
        api_module;

      for (var i = 0, n = api_modules.length; i < n; i++) {
        if (hachi.api[api_modules[i]][call] && typeof hachi.api[api_modules[i]][call] === 'function') {
         api_module = api_modules[i];

         var params = {
          args: hachi_exec.args
         };

         return callAndProcess(hachi, api_module, call, params);
        }
      }
    }
  }

  //default to showing help
  hachi_exec.help();
}

//check for connect command
if (call === 'connect') {
  var params = {
    target: hachi_exec.args[0],
    port: hachi_exec.args[1]
  };

  var fields = [];
  if (!params.target) fields.push('target');
  if (!params.port) fields.push('port');

  prompt(fields, params, function(params) {
    connect(params);
  });
} else {
  //look for host already configured against current directory
  var host = false,
    path = nconf.get('paths:' + process.cwd());

  if (path)
    host = nconf.get('hosts:' + path);

  connect(host);
}
